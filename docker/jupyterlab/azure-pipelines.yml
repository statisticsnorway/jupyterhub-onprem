name: $(Build.SourceBranch)-$(date:yyyyMMdd)$(rev:.r)

trigger:
  branches:
    include:
      - 'main'
  tags:
   include:
    - '*'
  paths:
    exclude:
      - docker/jupyterhub

schedules:
  - cron: "0 12 1 * *"
    displayName: Monthly build
    branches:
      include:
        - main
    always: true

resources:
  repositories:
    - repository: templates
      type: github
      name: statisticsnorway/azure-pipelines-templates
      endpoint: statisticsnorway

pool:
  name: 'extended_storage'

# Variables global to this pipeline
# https://docs.microsoft.com/en-us/azure/devops/pipelines/process/variables
variables:
  - name: imageName
    value: 'eu.gcr.io/prod-bip/ssb/statistikktjenester/jupyterlab-onprem'
  - name: imageNameNexus
    value: 'nexus.ssb.no:8437/prod-bip/ssb/statistikktjenester/jupyterlab-onprem'
  - name: repoName
    value: 'prod-bip/ssb/statistikktjenester/jupyterlab-onprem'
  - name: imageTagAfterVulnerabilityScan
    value: '$(Build.SourceBranchName)-$(Build.SourceVersion)'
  - name: Dockerfile
    value: 'docker/jupyterlab/Dockerfile'
  - name: timeBetweenRetriesVulnerabilityScan
    value: '30000'

# Job which builds Docker image, pushes this to GCR and checks for any image vulnerabilities
# NOTE: Sub-project pipelines are still running with the root working directory
jobs:
  - job: dockerBuildAndDockerPush
    timeoutInMinutes: 150
    displayName: 'Build jupyterlab-onprem image for dapla'
    steps:
      - template: docker/docker-build-image-and-push-to-gcr.yml@templates
        parameters:
          imageName: $(imageName)
          repoName: $(repoName)
          Dockerfile: $(DockerFile)
          timeBetweenRetriesVulnerabilityScan: $(timeBetweenRetriesVulnerabilityScan)

      # Need to tag 'latest' image (used by docker-tag-for-production)
      - script: |
          cat $(gcrJsonKey.secureFilePath) | docker login -u _json_key --password-stdin ${{ variables.imageHost }}
          docker pull ${{ variables.imageName }}:imagescan-${{ variables.imageTagAfterVulnerabilityScan }}
          docker tag ${{ variables.imageName }}:imagescan-${{ variables.imageTagAfterVulnerabilityScan }} ${{ variables.imageName }}:latest
          docker push ${{ variables.imageName }}:latest
        displayName: "Retagging latest image"
        condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/main'))

  # Job which pulls the Docker image with the 'latest' tag from GCR, tags this
  # with the git tag, and pushes that back to GCR.
  # The job triggers when any tag was committed to GitHub, which means all tags in
  # the code repo are propagated to the corresponding (newly built) image in GCR.
  - template: docker/docker-tag-for-production.yml@templates
    parameters:
      tagToTag: 'latest'
      gcrImageName: ${{ variables.imageName }}

  - job: deployToStaging
    dependsOn: dockerBuildAndDockerPush
    pool:
      name: jupyterhub-onprem-staging
      demands:
      - agent.name -equals staging-agent

    displayName: "Deploying to staging"
    condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/main'))
    steps:
      - script: |
          set -e
          
          IMAGE=${{ variables.imageNameNexus }}:latest
          echo "Pulling $IMAGE"
          docker pull $IMAGE

          echo "Removing dangling images"
          docker image prune --force

  - job: deployToProd
    dependsOn: dockerBuildAndDockerPush
    pool:
      name: jupyterhub-onprem-prod
      demands:
      - agent.name -equals prod-agent
    
    displayName: "Deploying to prod"
    condition: and(succeeded(), startsWith(variables['Build.SourceBranch'], 'refs/tags/'))
    steps:
      - script: |
          set -e
          
          REPO="$HOME/jupyterhub-onprem"
          if ! [ -d "$REPO" ]
          then
              echo "ERORR: repo $REPO does not exist."
              exit 2
          fi

          cd $REPO
          git pull
          echo "Getting the latest git tag"
          git fetch --tags
          TAG=`git describe --tags`
          echo "Found tag $TAG"
          
          IMAGE=${{ variables.imageNameNexus }}:$TAG
          echo "Pulling $IMAGE"
          docker pull $IMAGE
          
          echo "Removing dangling images"
          docker image prune --force
